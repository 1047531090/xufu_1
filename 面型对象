面向对象上
1.三大特征：封装，继承，多态
2.类与对象的关系：累是对象的末班，对象是累的实例，类只能通过对象才能使用
3.类的组成为属性和方法
4.对象的产生格式：类名 对象名 =new 类名();
5.若一个对象没有实例化而直接使用，则会出现空指向异常
6.类属于应用数据类型，传递的时候，传递的是对内存的使用权。
7.类的封装性：把字段和方法看作是一个整体,放在一个模块(类)里面,通过private关键字修饰，被封装的属性不能被外部直接调用，而只能通过setter和getter方法完成。只要是属性，则必须全部封装。
8.构造方法可以为类中的属性初始化，构造方法名字和类名相同，没有返回值类型声明，若类中没明确给出构造方法，则自动生成一个无参的，方法体为空的构造方法。在一个类中的构造方法可以重载，但是每个类至少有一个构造方法。
9.在Java中使用this关键字可以表示当前对象，通过“this.属性”可以调用本类中的属性 .通过“this.方法()”可以调用本类中的其他非静态方法，也可以通过this()的形式调用本类中的构造方法，但是调用时要求放在构造方法第一行
10.	使用static声明的属性和方法可以有类名直接调用，使用static修饰的属性是所有对象共享的，所有对象都可以对其进行操作。
11.	若要限制类对象的产生，可以将构造方法私有化。
12.	包专类。		
Integer	:求二进制，八进制，十六进制
Character
面向对象下
1.继承可以拓展已有类的功能，通过extends关键字实现，可以将父类非私有的成员继承到子类。
2.Java在执行子类的构造方法前会先调用父类无参的构造方法，其目的是为了对继承自父类的成员做初始化操作。	---->：子类在创建对象的时候，默认调用父类的无参构造方法，要是子类构造方法中指定调用父类其他构造方法，就调用指定的父类构造方法
3.父类有多个构造方法时，如果调用特定的构造方法，则可在子类的构造方法中通过super()关键字来实现。
4.this()用于在同一个类里调用其他的构造方法，而super()则是从子类构造器中调用其父类的构造器。
5.使用this调用属性和方法时先从本类中查找，若本类没有查找到，再从父类中查找，而使用super则直接从父类中找需要的属性或方法。
6.this()和super()相似之处:
a.当构造器有重载时，两者均会根据所给予的参数的类型和个数正确的执行对应的构造器；	
b.两者都必须编写在构造器的第一行，也正是这个原因，this()和super()无法共存于同一个构造器中。
7.重载(Overload)：两同一不同
8.覆写(Override):是在子类中定义名称，参数列表和父类相同的方法，不过访问权限不能小于父类方法的访问权限。不能覆写父类私有的方法
9.若父类的方法不希望被子类覆写，可在父类的方法前加上final关键字。
10.final修饰在变量前，该变量不能再赋值，表示常量；	public static final ....
11. 所有类均继承自Object类。一个好的类应该覆写Object类中的toString(),equals(),hashCode()3个方法，	
toString打印的信息：类+@+hashcode(十六进制的)为什么和 hashCode()不一样？	
所有的对象都可以向Object类进行向上转型。
