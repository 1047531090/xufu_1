1.调用类中的方法
(public class Test {
    public static void main(String[] args)throws ReflectiveOperationException {
        //通过三种方式获取类的类对象
        Class<?> c=Student.class;
        Class<?> c1=new Student().getClass();
        Class<?> c2=Class.forName("Student");//通过包名.类名获取类对象（因为该类在default包，所以可以不写包名）
        //通过类对象来构建student实例，效果和new  Student()一样，要求Student中必须要有无参的构造函数
        Student s=(Student) c.newInstance();
        Student s1=(Student) c1.newInstance();
        Student s2=(Student) c2.newInstance();
       s.age=1;
        s1.age=2;
        s2.age=3;
	System.out.println(s.age);
        System.out.println(s1.age);
        System.out.println(s2.age);
    }
)  
2.调用setter和getter
1.(package org.lxh.demo15.classinfodemo ;  
2.interface China{    // 定义China接口  
3.    public static final String NATIONAL = "China" ; // 定义全局常量  
4.    public static final String AUTHOR = "李兴华" ; // 定义全局常量  
5.    public void sayChina() ;        // 无参的，没有返回值的方法  
6.    public String sayHello(String name,int age) ;   // 定义有两个参数的方法，并返回内容  
7.}  
8.public class Person implements China{  
9.    private String name ;  
10.    private int age ;  
11.    public Person(){    // 无参构造  
12.    }  
13.    public Person(String name){  
14.        this.name = name ;  // 设置name属性  
15.    }  
16.    public Person(String name,int age){  
17.        this(name) ;  
18.        this.age = age ;  
19.    }  
20.    public void sayChina(){ // 覆写方法  
21.        System.out.println("作者：" + AUTHOR + "，国籍：" + NATIONAL) ;  
22.    }  
23.    public String sayHello(String name,int age){  
24.        return name + "，你好！我今年：" + age + "岁了！" ;  
25.    }  
26.    public void setName(String name){  
27.        this.name = name ;  
28.    }  
29.    public void setAge(int age){  
30.        this.age = age ;  
31.    }  
32.    public String getName(){  
33.        return this.name ;  
34.    }  
35.    public int getAge(){  
36.        return this.age ;  
37.    }  
38.};  
[html] view plain copy
1.package org.lxh.demo15.classinfodemo ;  
2.import java.lang.reflect.Method ;  
3.public class InvokeSetGetDemo{  
4.    public static void main(String args[]){  
5.        Class<?> c1 = null ;  
6.        Object obj = null ;  
7.        try{  
8.            c1 = Class.forName("org.lxh.demo15.classinfodemo.Person") ; // 实例化Class对象  
9.        }catch(Exception e){}  
10.        try{  
11.            obj = c1.newInstance() ;  
12.        }catch(Exception e){}  
13.        setter(obj,"name","李兴华",String.class) ; // 调用setter方法  
14.        setter(obj,"age",30,int.class) ;    // 调用setter方法  
15.        System.out.print("姓名：") ;  
16.        getter(obj,"name") ;  
17.        System.out.print("年龄：") ;  
18.        getter(obj,"age");  
19.    }  
20.    /**  
21.        Object obj：要操作的对象  
22.        String att：要操作的属性  
23.        Object value：要设置的属性内容  
24.        Class<?> type：要设置的属性类型  
25.    */  
26.    public static void setter(Object obj,String att,Object value,Class<?> type){  
27.        try{  
28.            Method met = obj.getClass().getMethod("set"+initStr(att),type) ;    // 得到setter方法  
29.            met.invoke(obj,value) ; // 设置setter的内容  
30.        }catch(Exception e){  
31.            e.printStackTrace() ;  
32.        }  
33.    }  
34.    public static void getter(Object obj,String att){  
35.        try{  
36.            Method met = obj.getClass().getMethod("get"+initStr(att)) ; // 得到setter方法 
)   
