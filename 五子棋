package wuziqi1;

import java.awt.Color;

public class Point {
	private int x;//x的坐标
	private int y;//y的坐标
	private Color color ;//棋子的颜色
	public static final int point_size = 40;//棋子的大小
	
	public Point(int x,int y){
		this.x = x;
		this.y = y;
	}
	
	public Point(int x,int y,Color color) {
		this.x = x;
		this.y = y;
		this.color = color;
	}
	
	public int getX() {
		return x;
	}
	
	public void setX(int x) {
		this.x = x;
	}
	
	public int getY() {
		return y;
	}
	
	public void setY(int y) {
		this.y = y;
	}
	
	public Color getColor() {
		return color;
	}
	
	public void setColor(Color color) {
		this.color = color;
	}

	public String toString() {
		return "Point{" +
				"x=" + x +
				", y=" + y +
				", color=" + color +
				'}';
	}
	
}


package wuziqi1;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

@SuppressWarnings("serial")
public class Wuziqi extends JFrame {
	
	public Wuziqi(){
		
		this.setLayout(null);
		
//		//设置大小  
//        setSize(650, 650);  
//        //设置位置  
//        setLocation(50, 50);  
//        //背景图片的路径。（相对路径或者绝对路径。本例图片放于"java项目名"的文件下）  
//        String path = "H:/eclipse/workspace/lianxi/src/com/wuziqi1/1.jpg";  
//        // 背景图片  
//        ImageIcon background = new ImageIcon(path);  
//        // 把背景图片显示在一个标签里面  
//        JLabel label = new JLabel(background);  
//        // 把标签的大小位置设置为图片刚好填充整个面板  
//        label.setBounds(0, 0, this.getWidth(), this.getHeight());  
//        // 把内容窗格转化为JPanel，否则不能用方法setOpaque()来使内容窗格透明  
//        JPanel imagePanel = (JPanel) this.getContentPane();  
//        imagePanel.setOpaque(false);  
//        // 把背景图片添加到分层窗格的最底层作为背景  
//        this.getLayeredPane().add(label, new Integer(Integer.MIN_VALUE));

		
		TestPaint testPaint = new TestPaint();
		testPaint.setBounds(50,50,600,550);
		this.add(testPaint);
		
		JButton jButton = new JButton();
		jButton.setBounds(70, 600, 100, 50);
		jButton.setText("认输");
		jButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				TestPaint testPaint = new TestPaint();
				String s11;
				if(testPaint.isHei != true){
					s11 = "黑子";
				}else{
					s11 = "白子";
				}
				testPaint.renshu();
			}
		});
		this.add(jButton);
		
		
		this.setTitle("五子棋");
		this.setBounds(300,200,650,750);
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		this.setVisible(true);
		
	}
	
	
	
	public static void main(String[] args) {
		new Wuziqi();
	}
}



package wuziqi1;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JFrame;

import org.omg.CORBA.PUBLIC_MEMBER;

public  class TestPaint extends JComponent implements MouseListener{
	List<Point> pointList = new ArrayList<Point>();
	
	public boolean isHei = true;
	private int currentX = 0;//当前棋子X的位置
	private int currentY = 0;//当前棋子Y的位置
	private boolean isWinNow = false;
	
	public TestPaint() {
		this.addMouseListener(this);
	}
	
	//绘制内容（画棋盘，画棋子）
	public void paint(Graphics g) {
		//绘制棋盘
		for(int i=-1;i<10;i++){
			g.drawLine(20, (i*50+70),520,(i*50+70));
			g.drawLine((i*50+70),20, (i*50+70), 520);
		}
		
		//绘制棋子
		for(Point p:pointList){
			g.setColor(p.getColor());
			g.fillOval(p.getX(), p.getY(), Point.point_size, Point.point_size);
		}
			
		
		
		
		//判断输赢
		isWin();
		if(isWinNow==true){
			g.setFont(new Font("宋体",Font.BOLD,50));
			g.setColor(Color.black);
			String s ;
			if(isHei != true){
				s = "黑子";
			}else{
				s = "白子";
			}
			g.drawString(s+"赢了", 200, 200);
		}
		
		
		
	}
	
	//判断输赢的规则
	public void isWin(){
		int dongxi = 0;
		//东
		for(int nowX = currentX,i=0;i<5&&nowX<=520;nowX+=50,i++){
			Point point = findPoint(nowX,currentY);
			if(point!=null){
				//当前棋子时黑子
				if(isHei!=true){
					if(point.getColor()==Color.black){
						dongxi++;
					}else{
						break;
					}
				}
				//当前棋子时白子
				if(isHei!=false){
					if(point.getColor()==Color.white){
						dongxi++;
					}else{
						break;
					}
				}
			}else{
				break;
			}
		}
		//西
		for(int nowX = currentX-50,i=0;i<5&&nowX>=0;nowX-=50,i++){
			Point point = findPoint(nowX,currentY);
			if(point!=null){
				//当前棋子是黑子
				if(isHei!=true){
					if(point.getColor()==Color.black){
						dongxi++;
					}else{
						break;
					}
				}
				//当前棋子是白子
				if(isHei!=false){
					if(point.getColor()==Color.white){
						dongxi++;
					}else{
						break;
					}
				}
			}else{
				break;
			}
		}
		if(isHei!=true){
			System.out.println("东西方向黑子个数"+dongxi);
		}else{
			System.out.println("东西方向白子个数"+dongxi);
		}
		
		if(dongxi>=5){
			isWinNow = true;
			if(isHei != true){
				System.out.println("黑子赢了");
			}else{
				System.out.println("白子赢了");
			}
		}
		//南
		int nanbei = 0;
		for(int nowY = currentY,i=0;i<5&&nowY<=520;nowY+=50,i++){
			Point point = findPoint(currentX,nowY);
			if(point!=null){
				//当前棋子时黑子
				if(isHei!=true){
					if(point.getColor()==Color.black){
						nanbei++;
					}else{
						break;
					}
				}
				//当前棋子时白子
				if(isHei!=false){
					if(point.getColor()==Color.white){
						nanbei++;
					}else{
						break;
					}
				}
			}else{
				break;
			}
		}
		//北
		for(int nowY = currentY-50,i=0;i<5&&nowY>=0;nowY-=50,i++){
			Point point = findPoint(currentX,nowY);
			if(point!=null){
				//当前棋子时黑子
				if(isHei!=true){
					if(point.getColor()==Color.black){
						nanbei++;
					}else{
						break;
					}
				}
				//当前棋子时白子
				if(isHei!=false){
					if(point.getColor()==Color.white){
						nanbei++;
					}else{
						break;
					}
				}
			}else{
				break;
			}
		}
		if(isHei!=true){
			System.out.println("南北方向黑子个数"+nanbei);
		}else{
			System.out.println("南北方向白子个数"+nanbei);
		}
		if(nanbei>=5){
			isWinNow = true;
			if(isHei != true){
				System.out.println("黑子赢了");
//				iii = true;
			}else{
				System.out.println("白子赢了");
//				iii = false;
			}
		}
		//东北
		int dongbeixinan = 0;
		for(int nowX = currentX,nowY = currentY,i=0;nowY>=0&&nowX<=520&&i<5;nowX+=50,nowY-=50,i++){
			Point point = findPoint(nowX,nowY);
			if(point!=null){
				//当前棋子时黑子
				if(isHei!=true){
					if(point.getColor()==Color.black){
						dongbeixinan++;
					}else{
						break;
					}
				}
				//当前棋子时白子
				if(isHei!=false){
					if(point.getColor()==Color.white){
						dongbeixinan++;
					}else{
						break;
					}
				}
			}else{
				break;
			}
		}
		//西南
		for(int nowX = currentX-50,nowY = currentY+50,i=0;nowY<=520&&nowX>=0&&i<5;nowX-=50,nowY+=50,i++){
			Point point = findPoint(nowX,nowY);
			if(point!=null){
				//当前棋子时黑子
				if(isHei!=true){
					if(point.getColor()==Color.black){
						dongbeixinan++;
					}else{
						break;
					}
				}
				//当前棋子时白子
				if(isHei!=false){
					if(point.getColor()==Color.white){
						dongbeixinan++;
					}else{
						break;
					}
				}
			}else{
				break;
			}
		}
		if(isHei!=true){
			System.out.println("东北西南方向黑子个数"+dongbeixinan);
		}else{
			System.out.println("东北西南方向白子个数"+dongbeixinan);
		}
		
		if(dongbeixinan>=5){
			isWinNow = true;
			if(isHei != true){
				System.out.println("黑子赢了");
//				iii = true;
			}else{
				System.out.println("白子赢了");
//				iii = false;
			}
		}
		//东南
		int dongnanxibei = 0;
		for(int nowX = currentX,nowY = currentY,i=0;nowY<=520&&nowX<=520&&i<5;nowX+=50,nowY+=50,i++){
			Point point = findPoint(nowX,nowY);
			if(point!=null){
				//当前棋子时黑子
				if(isHei!=true){
					if(point.getColor()==Color.black){
						dongnanxibei++;
					}else{
						break;
					}
				}
				//当前棋子时白子
				if(isHei!=false){
					if(point.getColor()==Color.white){
						dongnanxibei++;
					}else{
						break;
					}
				}
			}else{
				break;
			}
		}
		//西北
		for(int nowX = currentX-50,nowY = currentY-50,i=0;nowY>=0&&nowX>=0&&i<5;nowX-=50,nowY-=50,i++){
			Point point = findPoint(nowX,nowY);
			if(point!=null){
				//当前棋子时黑子
				if(isHei!=true){
					if(point.getColor()==Color.black){
						dongnanxibei++;
					}else{
						break;
					}
				}
				//当前棋子时白子
				if(isHei!=false){
					if(point.getColor()==Color.white){
						dongnanxibei++;
					}else{
						break;
					}
				}
			}else{
				break;
			}
		}
		if(isHei!=true){
			System.out.println("东南西北方向黑子个数"+dongnanxibei);
		}else{
			System.out.println("东南西北方向白子个数"+dongnanxibei);
		}
		
		if(dongnanxibei>=5){
			isWinNow = true;
			if(isHei != true){
				System.out.println("黑子赢了");
//				iii = true;
			}else{
				System.out.println("白子赢了");
//				iii = false;
			}
		}
	}
	
	
	
	//找点
	public Point findPoint(int x,int y){
		for(Point p:pointList){
			if((p.getX()==x)&&(p.getY()==y)){
				//判断坐标是否有相同的
				return p;
			}
		}
		return null;
	}
	
	public void mouseClicked(MouseEvent e) {
		System.out.println("点了"+e.getX()+"  "+e.getY());
		int x = e.getX();
		int y = e.getY();
		//算出应该在那一条线上
		double xianX = Math.round((x-20)/50.0);
		double xianY = Math.round((y-20)/50.0);
		//System.out.println("第几根线"+xianY+" "+Math.round(xianY));
		x = ((int)xianX)*50;
		y = ((int)xianY)*50;
		//记录当前棋子位置
		currentX = x;
		currentY = y;
		//int x = e.getX()-Point.Point_size/2;
		//int y = e.getY()-Point.Point_size/2;
		//避免重复绘制棋子
		boolean isHave = false;
		for(Point p:pointList){
			if((p.getX()==x)&&(p.getY()==y)){
				isHave = true;
			}
		}
		if(!isHave){
			Point point = new Point(x,y);
			if(isHei==true){
				  //黑棋子
				point.setColor(Color.black);
				 isHei = false;
			  }else{
				  //白棋子
				  point.setColor(Color.white);
				 isHei = true;
			  }
			if(isWinNow==false){
				pointList.add(point);
			}
			//pointList.add(point);
			//用户触发请求重新绘制
			this.repaint();
		}
		System.out.println("目前棋子数为"+pointList.size());
	}
	
	//认输
	public void renshu(){
		if(isHei != true){
			System.out.println("黑子认输");
		}else{
			System.out.println("白子认输");
		}
		System.exit(0);
	}
	
	public void mousePressed(MouseEvent e) {
		
		
	}

	
	public void mouseReleased(MouseEvent e) {
		
		
	}

	
	public void mouseEntered(MouseEvent e) {
		
		
	}

	
	public void mouseExited(MouseEvent e) {
		
		
	}
}





